{
  "hash": "7f2aabc07dbb8fad709eb7e01268b24d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"09 - Análise de Trajetória\"\nformat:\n  html:\n    toc: true\n    toc-depth: 3\nexecute:\n  cache: false\n---\n\n\n\n## Motivação\n\nA análise de trajetória e pseudotempo surgiu como uma solução para uma limitação inerente aos protocolos de RNA-seq de célula única: a perda de informação temporal. Durante o sequenciamento, as células são destruídas, impedindo o rastreamento dinâmico do processo biológico ao qual pertencem. Apesar disso, os processos de diferenciação celular são essencialmente contínuos e assimétricos, e essa progressão pode ser reconstruída computacionalmente com base na semelhança entre perfis transcricionais.\n\nA reconstrução de trajetórias permite inferir o curso temporal de eventos celulares, identificar ramos de diferenciação e genes reguladores ao longo desses caminhos. O pseudotempo é uma variável latente que representa a posição relativa de cada célula nesse processo inferido. Este conceito é fundamental para estudos em desenvolvimento embrionário, resposta imune, plasticidade tumoral e outros processos biológicos com dinâmica celular.\n\n## Contextualização\n\nNeste tutorial, focaremos na análise de trajetória utilizando **Monocle 3**, uma ferramenta poderosa e flexível baseada em grafos para inferência de trajetórias celulares. Também faremos uso de pacotes auxiliares que se integram diretamente ao Monocle, como **Seurat**, para o pré-processamento e anotação dos dados, e **ggplot2** e **dplyr** para visualização e manipulação dos resultados.\n\nOs principais pacotes utilizados serão:\n\n-   **Monocle 3**: permite inferir grafos de trajetórias com múltiplas bifurcações, ordenar células ao longo do pseudotempo e realizar análises diferenciais.\n-   **Seurat**: usado para normalização, redução de dimensionalidade, clusterização e anotação de tipos celulares.\n-   **ggplot2** e **patchwork**: para visualizações elegantes e organização de figuras.\n-   **dplyr**: para manipulação eficiente de dados tabulares.\n\nAo longo do tutorial, utilizaremos um objeto Seurat previamente anotado, e demonstraremos como convertê-lo em um `cell_data_set`, construir trajetórias, inferir pseudotempo e identificar genes diferencialmente expressos ao longo do percurso celular.\n\n## Ajustar ambiente e carregar pacotes\n\nNesta seção, vamos configurar o ambiente de trabalho e carregar os pacotes necessários. Isso inclui verificar e instalar o pacote `monocle3`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Verifica pacotes\nif (!requireNamespace(\"monocle3\")) {\n  remotes::install_github('cole-trapnell-lab/monocle3')\n}\n\n# Carregar pacotes\nlibrary(Seurat)\nlibrary(SeuratWrappers)\nlibrary(SummarizedExperiment)\nlibrary(monocle3)\n\n# Definindo diretório padrão\nknitr::opts_knit$set(\n  root.dir = \"/home/oandrefonseca/Disciplinas/PPGBM0117.2025.1\",\n  verbose = FALSE\n)\n\n# Aumentar o limite de uso de memória\noptions(future.globals.maxSize = 10 * 1024^3) # 10 GB, por exemplo\n```\n:::\n\n\n\n## Carregando dados do projeto\n\nAgora que o ambiente está configurado, carregamos o objeto `Seurat` que contém os dados de expressão gênica já processados e anotados. O uso de um objeto pronto permite focar diretamente na inferência de comunicação célula-célula, utilizando as anotações de tipos celulares para identificar emissores e receptores em potenciais interações.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Carregando um objeto Seurat já processado (pré-clusterizado)\nseurat_object <- readRDS(file = here::here(\"data/seurat_annotated.RDS\"))\n```\n:::\n\n::: {.cell .column-screen-inset-shaded layout-nrow=\"1\" layout-align=\"center\"}\n\n```{.r .cell-code}\n# Verificar os clusters\nDimPlot(\n  seurat_object, \n  group.by = \"manual_annotation\"\n)\n```\n\n::: {.cell-output-display}\n![](09_cell_trajectory_files/figure-html/fig-umap-1.png){#fig-umap fig-align='center' width=672}\n:::\n:::\n\n\n\n## Selecionando uma subpopulacao\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Description\n\nfibroblast_compartiment_object <- subset(\n  seurat_object,\n  subset = manual_annotation == \"Fibroblasts\"\n)\n```\n:::\n\n\n\n:::{.callout-note}\nDESCRIPTION\n:::\n\n## Conversão para `cell_data_set`\n\nNesta etapa, converteremos o objeto `Seurat` para um objeto `cell_data_set`, o formato utilizado pelo Monocle 3. Essa conversão é fundamental para que possamos aplicar as funções de aprendizado de trajetória.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Conversão do objeto Seurat para cell_data_set (Monocle 3)\nmonocle_object <- as.cell_data_set(\n  fibroblast_compartiment_object)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Monocle 3 trajectories require cluster partitions, which Seurat does\nnot calculate. Please run 'cluster_cells' on your cell_data_set object\n```\n\n\n:::\n\n```{.r .cell-code}\n# Verificar conteúdo do objeto convertido\nmonocle_object\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass: cell_data_set \ndim: 38606 1921 \nmetadata(0):\nassays(2): counts logcounts\nrownames(38606): DDX11L2 MIR1302-2HG ... ENSG00000278817\n  ENSG00000277196\nrowData names(0):\ncolnames(1921): SRR8315737_AACGTTGAGCACCGTC-1\n  SRR8315737_AACGTTGCACCAGATT-1 ... SRR8890794_AACTCTTAGGACACCA-1\n  SRR8890794_GATTCAGTCCTAAGTG-1\ncolData names(34): orig.ident nCount_RNA ... ident Size_Factor\nreducedDimNames(2): PCA UMAP\nmainExpName: RNA\naltExpNames(0):\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Reduzindo dimensionalidade\nmonocle_object <- reduce_dimension(monocle_object)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNo preprocess_method specified, using preprocess_method = 'PCA'\n```\n\n\n:::\n\n```{.r .cell-code}\n# Clusterizando novamente apenas os Fibroblastos\nmonocle_object <- cluster_cells(monocle_object)\n```\n:::\n\n\n\n## Construção do grafo e ordenação das células\n\nNesta etapa, aprenderemos a estrutura do grafo que representa as possíveis trajetórias celulares e ordenaremos as células ao longo do pseudotempo com Monocle 3. O ponto de início (\"root\") é essencial para garantir que o pseudotempo reflita corretamente a progressão biológica esperada. Para uma abordagem biologicamente orientada, é possível utilizar ferramentas como **CytoTRACE**, que ranqueiam as células de acordo com seu grau de diferenciação, para identificar células menos diferenciadas como raízes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aprender o grafo da trajetória\nmonocle_object <- learn_graph(monocle_object)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-note}\nA função `learn_graph()` modela as transições celulares com base em uma curva principal sobre o embedding reduzido (geralmente UMAP). O grafo inferido reflete as conexões entre estados celulares relacionados.\n:::\n\n# Visualizar o grafo\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_cells(monocle_object,\n           color_cells_by = \"cluster\",\n           label_groups_by_cluster = FALSE,\n           label_leaves = FALSE,\n           label_branch_points = FALSE)\n```\n\n::: {.cell-output-display}\n![](09_cell_trajectory_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ordenar células interativamente com base na estrutura do grafo\nmonocle_object <- order_cells(monocle_object)\n```\n:::\n\n\n\n::: {.callout-note}\nA função `order_cells()` calcula o pseudotempo baseado na distância do ponto inicial (root) ao longo da trajetória inferida. A escolha da raiz afeta diretamente a interpretação biológica do pseudotempo.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Acessar a pseudotemporalidade das células\npt <- pseudotime(monocle_object)\n\n# Células onde o pseudotime é zero (as raízes)\nroot_cells <- names(pt[pt == 0])\n\n# Ver algumas delas\nhead(root_cells)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"SRR8315753_GAAACTCAGGTGCTAG-1\" \"SRR8315766_CAAGATCTCTGAGTGT-1\"\n```\n\n\n:::\n:::\n\n\n\n\n# Visualizar pseudotempo inferido\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_cells(monocle_object, color_cells_by = \"pseudotime\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCells aren't colored in a way that allows them to be grouped.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](09_cell_trajectory_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n### (Opcional) Definindo raízes com base em scores de diferenciação\n\nCaso você deseje utilizar uma abordagem automatizada e biologicamente informada:\n\n1.  Calcule os scores de diferenciação com **CytoTRACE** ou outro método.\n2.  Identifique as células com maior escore (menos diferenciadas).\n3.  Use técnicas de agrupamento (como `dbscan`) para isolar regiões densas.\n4.  Escolha representantes centrais dessas regiões como \"roots\" para a função `order_cells()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exemplo de uso direto com células raiz definidas\n# monocle_object <- order_cells(monocle_object, root_cells = <vetor_com_ids>)\n```\n:::\n\n\n\nEssa abordagem permite uma ordenação mais robusta, principalmente quando o início do processo biológico não é diretamente observável.\n\nCom o objeto `monocle_object` devidamente configurado, podemos agora aprender a estrutura do grafo e ordenar as células ao longo da trajetória inferida. Estas etapas são essenciais para a análise de pseudotempo com Monocle 3.\n\n## Salvando o objeto anotado\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(seurat_object, file = \"data/seurat_trajectory.RDS\")\n```\n:::\n",
    "supporting": [
      "09_cell_trajectory_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}