features = c("nCount_RNA", "nFeature_RNA"), ncol = 3)
p2 <- VlnPlot(seurat_object,
features = c("percent.mt", "percent.ribo", "percent.hb"), ncol = 3)
p1
p2
#| label: fig-quality-correlation
#| column: screen-inset-shaded
#| layout-nrow: 1
plot1 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1
plot2
seurat_object$mt_outlier <- is_outlier(
seurat_object, metric = "percent.mt", nmads = 3)
is_outlier <- function(seurat_object, metric, nmads = 3, verbose = TRUE) {
# Extrai os valores da métrica desejada
values <- seurat_object@meta.data[[metric]]
# Calcula mediana e desvio absoluto da mediana (MAD)
med <- median(values, na.rm = TRUE)
mad_val <- mad(values, center = med, constant = 1, na.rm = TRUE)
# Define os thresholds inferior e superior
lower <- med - nmads * mad_val
upper <- med + nmads * mad_val
# Imprime os limites, se verbose = TRUE
if (verbose) {
message(glue::glue("Outliers para '{metric}' definidos como valores fora do intervalo:"))
message(glue::glue("  Inferior: {round(lower, 2)}"))
message(glue::glue("  Superior: {round(upper, 2)}"))
}
# Identifica outliers
outlier <- (values < lower) | (values > upper)
return(outlier)
}
seurat_object$mt_outlier <- is_outlier(
seurat_object, metric = "percent.mt", nmads = 3)
table(seurat_object$mt_outlier)
#| warning: false
# Converta o objeto Seurat para SingleCellExperiment
sce <- as.SingleCellExperiment(seurat_object)
# Executa a identificação de dupletos
sce <- scDblFinder(sce)
# Adiciona o resultado de volta ao objeto Seurat
seurat_object$scDblFinder.class <- sce$scDblFinder.class
seurat_object$doublet_score <- sce$scDblFinder.score
# Visualiza a proporção de dupletos identificados
table(seurat_object$scDblFinder.class)
# Criando copia do objeto pre-filtragem
pre_seurat_object <- seurat_object
# Filtro com thresholds definidos manualmente
seurat_object <- subset(
seurat_object,
subset = nFeature_RNA > 200 &
nFeature_RNA < 6000 &
percent.mt < 10 &
scDblFinder.class == "singlet"
)
# Estatísticas após o QC
post_qc_stats <- data.frame(
number_of_cells = ncol(seurat_object),
mean_counts_per_cell = mean(seurat_object$nCount_RNA),
median_counts_per_cell = median(seurat_object$nCount_RNA),
mean_features_per_cell = mean(seurat_object$nFeature_RNA),
median_features_per_cell = median(seurat_object$nFeature_RNA)
)
# Unindo as tabelas
qc_summary <- rbind(
cbind(Etapa = "Antes do QC", pre_qc_stats),
cbind(Etapa = "Depois do QC", post_qc_stats)
)
#| warning: false
seurat_object <- NormalizeData(
seurat_object, normalization.method = "LogNormalize", scale.factor = 10000)
#| label: fig-highly-variable-genes
#| column: screen-inset-shaded
#| fig-align: center
#| layout-nrow: 1
#| warning: false
seurat_object <- FindVariableFeatures(
seurat_object, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seurat_object), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seurat_object)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
#| warning: false
seurat_object <- ScaleData(seurat_object)
#| warning: false
seurat_object <- SCTransform(
seurat_object, vars.to.regress = "percent.mt", verbose = FALSE)
#| warning: false
library(Seurat)
library(ROGUE)
library(presto)
library(dplyr)
library(here)
library(ggplot2)
knitr::opts_knit$set(
root.dir = "/home/oandrefonseca/Disciplinas/PPGBM0117.2025.1",
verbose = FALSE
)
# Aumentar o limite de uso de memoria
options(future.globals.maxSize = 5 * 1024^3) # 5 GB, por exemplo
library(Seurat)
library(ROGUE)
library(presto)
library(dplyr)
library(here)
library(ggplot2)
knitr::opts_knit$set(
root.dir = "/home/oandrefonseca/Disciplinas/PPGBM0117.2025.1",
verbose = FALSE
)
# Aumentar o limite de uso de memoria
options(future.globals.maxSize = 5 * 1024^3) # 5 GB, por exemplo
# Objeto contendo todas as amostras
seurat_object <- readRDS(file = here::here("./data/seurat_object.RDS"))
# Objeto contendo todas as amostras
seurat_object <- readRDS(file = here::here("./data/seurat_object.RDS"))
seurat_object <- SCTransform(
seurat_object, vars.to.regress = "percent.mt", verbose = FALSE)
View(seurat_object@meta.data)
seurat_object <- SCTransform(
seurat_object, vars.to.regress = "percent_mt", verbose = FALSE)
seurat_object <- SCTransform(
seurat_object, vars.to.regress = "percent_mt", verbose = FALSE)
seurat_object <- NormalizeData(
seurat_object, normalization.method = "LogNormalize", scale.factor = 10000)
seurat_object <- FindVariableFeatures(
seurat_object, selection.method = "vst", nfeatures = 2000)
seurat_object <- ScaleData(
seurat_object, features = VariableFeatures(seurat_object))
seurat_object <- RunPCA(seurat_object, npcs = 50, verbose = FALSE)
ElbowPlot(seurat_object, reduction = "pca")
# Examine and visualize PCA results a few different ways
VizDimLoadings(seurat_object, dims = 1:2, reduction = "pca")
VizDimLoadings(seurat_object, dims = 1:2, reduction = "pca")
seurat_object <- FindNeighbors(seurat_object, dims = 1:20)
?FindNeighbors
seurat_object@graphs
?FindClusters
seurat_object <- FindClusters(
seurat_object, algorithm = 4, resolution = c(0.25, 0.5, 1.0))
View(seurat_object@meta.data)
seurat_object <- RunUMAP(seurat_object, dims = 1:20)
DimPlot(seurat_object, reduction = "umap", label = TRUE)
View(seurat_object@meta.data)
?DimPlot
colnames(seurat_object@meta.data)
DimPlot(seurat_object, reduction = "umap", split.by = c("RNA_snn_res.0.25", "RNA_snn_res.0.5", "RNA_snn_res.1"), label = TRUE)
DimPlot(seurat_object, reduction = "umap", group.by = c("RNA_snn_res.0.25", "RNA_snn_res.0.5", "RNA_snn_res.1"), label = TRUE)
# O parametro `max.cells.per.ident` foi acrescentado para otimizar o tempo computacional. Remove-o para analises reais.
cluster_markers <- FindAllMarkers(seurat_object, max.cells.per.ident = 1000)
downsampled_object <- subset(x = seurat_object, downsample = 1000)
counts_matrix <- LayerData(
downsampled_object, assay = "RNA", layer = "counts")
entropy_calculation <- SE_fun(counts_matrix)
rogue_value <- CalculateRogue(
entropy_calculation,
platform = "UMI")
rogue_value
rogue_result <- rogue(
counts_matrix,
labels = downsampled_object@meta.data$seurat_clusters,
samples = downsampled_object@meta.data$orig.ident,
platform = "UMI",
span = 0.6
)
rogue.boxplot(rogue_result)
Idents(seurat_object)
Idents(seurat_object)
seurat_object
Seurat::Idents(seurat_object)
Seurat::Idents(seurat_object)
#| label: fig-umap
#| column: screen-inset-shaded
#| fig-align: center
#| layout-nrow: 1
#| warning: false
# Carregando um objeto Seurat já processado (pré-clusterizado)
seurat_object <- readRDS(file = here::here("data/seurat_clustered.RDS"))
# Verificar os clusters
DimPlot(seurat_object, group.by = "seurat_clusters")
#| warning: false
# Instalar pacotes necessários caso não estejam instalados
if (!requireNamespace("SingleR")) BiocManager::install("SingleR")
if (!requireNamespace("celldex")) BiocManager::install("celldex")
# Carregar pacotes
library(Seurat)
library(presto)
library(SingleR)
library(celldex)
library(SingleCellExperiment)
library(dplyr)
# Definindo diretorio padrao
knitr::opts_knit$set(
root.dir = "/home/oandrefonseca/Disciplinas/PPGBM0117.2025.1",
verbose = FALSE
)
# Aumentar o limite de uso de memoria
options(future.globals.maxSize = 5 * 1024^3) # 5 GB, por exemplo
# Definir a lista de renomeação
cluster_annotations <- list(
"1" = "CD8+ Cytotoxic T cells",
"2" = "CD4+ T cells / TCM-like",
"3" = "Regulatory T cells (Tregs)",
"4" = "B cells",
"5" = "Monocytes (Inflammatory)",
"6" = "Tumor-Associated Cells (PRAME+ Tumor)",
"7" = "Plasma Cells",
"8" = "Keratinocytes / Tumor-associated Epithelium",
"9" = "Fibroblasts (CAF-like)",
"10" = "Proliferating Tumor Cells",
"11" = "Plasmacytoid Dendritic Cells (pDC-like)",
"12" = "Endothelial Cells",
"13" = "Mast Cells",
"14" = "Melanoma Cells (Tumor Melanocytic)"
)
cluster_annotations
Idents(seurat_object)
Idents(seurat_object)[1]
cluster_annotations[Idents(seurat_object)[1]]
cluster_annotations[Idents(seurat_object)]
as.vector(cluster_annotations[Idents(seurat_object)])
names(cluster_annotations[Idents(seurat_object)])
unlist(cluster_annotations[Idents(seurat_object)])
unlist(cluster_annotations[Idents(seurat_object)])[1]
# Criando coluna com anotacao manual
seurat_object$manual_annotation <- unlist(cluster_annotations[Idents(seurat_object)])
length(unlist(cluster_annotations[Idents(seurat_object)]))
View(seurat_object@meta.data)
length(cluster_annotations[Idents(seurat_object)])
length(unlist(cluster_annotations[Idents(seurat_object)]))
as.vector(cluster_annotations[Idents(seurat_object)])[1]
unlist(cluster_annotations[Idents(seurat_object)]))
as.vector(cluster_annotations[Idents(seurat_object)])
length(unlist(cluster_annotations[Idents(seurat_object)])[1])
length(as.vector(cluster_annotations[Idents(seurat_object)]))
as.vector(cluster_annotations[Idents(seurat_object)])
length(as.vector(cluster_annotations[Idents(seurat_object)]))
seurat_object$manual_annotation <- as.vector(cluster_annotations[Idents(seurat_object)])
cluster_ids <- as.character(Idents(seurat_object)])
cluster_ids <- as.character(Idents(seurat_object)])
cluster_ids <- as.character(Idents(seurat_object))
as.vector(cluster_annotations[cluster_ids])
as.vector(cluster_annotations[cluster_ids])
seurat_object$manual_annotation <- as.vector(
cluster_annotations[cluster_ids])
cluster_ids <- as.character(Idents(seurat_object))
seurat_object$manual_annotation <- as.vector(
cluster_annotations[cluster_ids])
table(cluster_ids %in% names(cluster_annotations))
# Vamos fazer uma anotacao mais generica usando a resolucao de 0.25
Idents(seurat_object) <- "RNA_snn_res.0.25"
seurat_object$manual_annotation <- as.vector(
cluster_annotations[cluster_ids])
cluster_ids <- as.character(Idents(seurat_object))
seurat_object$manual_annotation <- as.vector(
cluster_annotations[cluster_ids])
as.vector(
cluster_annotations[cluster_ids])
as.vector(
cluster_annotations[cluster_ids])
as.vector(
cluster_annotations[cluster_ids])
seurat_object$manual_annotation
cluster_annotations[cluster_ids]
seurat_object$manual_annotation <- cluster_annotations[cluster_ids]
cluster_annotations
cluster_annotations[c(1,1,1,2,3)]
cluster_annotations[c(1,1,2,3)]
cluster_annotations[c(1,1,2,3)]
names(cluster_annotations[c(1,1,2,3)])
as.vector(cluster_annotations[c(1,1,2,3)])
unlist(cluster_annotations[c(1,1,2,3)])
manual_annotation <- unlist(cluster_annotations[cluster_ids])
manual_annotation
manual_annotation <- unlist(cluster_annotations[cluster_ids])
manual_annotation
seurat_object$manual_annotation <- unlist(cluster_annotations[cluster_ids])
length(manual_annotation)
seurat_object$manual_annotation <- 1:nrow(seurat_object)
seurat_object$manual_annotation
unlist(cluster_annotations[cluster_ids])
manual_annotation <- as.vector(unlist(cluster_annotations[cluster_ids]))
manual_annotation
seurat_object$manual_annotation <- as.vector(unlist(cluster_annotations[cluster_ids]))
# Renomear os clusters
cluster_ids <- as.character(Idents(seurat_object))
# Criando coluna com anotacao manual
seurat_object$manual_annotation <- as.vector(
unlist(cluster_annotations[cluster_ids]))
# Visualizar para conferir
table(seurat_object$manual_annotation)
# Visualizar anotacao
DimPlot(seurat_object, group.by = "manual_annotation", label = TRUE, pt.size = 0.5)
p1 <- DimPlot(seurat_object, group.by = "manual_annotation", label = TRUE) +
ggplot2::ggtitle("Anotação manual (clusters)")
p1
p1
# Comparar manual vs automática
confusion_matrix <- table(
Manual = seurat_object$manual_annotation,
Automatic = seurat_object$SingleR
)
# Converter para SingleCellExperiment
sce <- as.SingleCellExperiment(seurat_object)
# Carregar uma base de referencia
ref <- celldex::HumanPrimaryCellAtlasData()
# Rodar SingleR
pred <- SingleR(
test = sce, ref = ref, labels = ref$label.main)
# Adicionar anotação ao objeto Seurat
seurat_object$SingleR <- pred$labels
# Comparar manual vs automática
confusion_matrix <- table(
Manual = seurat_object$manual_annotation,
Automatic = seurat_object$SingleR
)
# Normalizar por linha (proporção dentro de cada anotação manual)
confusion_prop <- prop.table(confusion_matrix, margin = 1)
confusion_prop
# Visualização da matriz de confusão
pheatmap(
confusion_prop,
display_numbers = TRUE,            # mostra as proporções
number_format = "%.2f",            # duas casas decimais
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("white", "steelblue"))(100)
)
# Visualização da matriz de confusão
pheatmap::pheatmap(
confusion_prop,
display_numbers = TRUE,            # mostra as proporções
number_format = "%.2f",            # duas casas decimais
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("white", "steelblue"))(100)
)
# Visualização da matriz de confusão
pheatmap::pheatmap(
confusion_prop,
display_numbers = TRUE,            # mostra as proporções
number_format = "%.1f",            # duas casas decimais
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("white", "steelblue"))(100)
)
?pheatmap::pheatmap
# Visualização da matriz de confusão
pheatmap::pheatmap(
confusion_prop,
fontsize = 4,
display_numbers = TRUE,            # mostra as proporções
number_format = "%.1f",            # duas casas decimais
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("white", "steelblue"))(100)
)
# Visualização da matriz de confusão
pheatmap::pheatmap(
confusion_prop,
fontsize = 6,
display_numbers = TRUE,            # mostra as proporções
number_format = "%.1f",            # duas casas decimais
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("white", "steelblue"))(100)
)
seurat_object$manual_annotation
View(seurat_object@meta.data)
DimPlot(seurat_object, group.by = "manual_annotation", label = TRUE, pt.size = 0.5)
# Visualizar anotacao
DimPlot(seurat_object, group.by = "manual_annotation", label = FALSE, pt.size = 0.5)
?DimPlot
DimPlot(seurat_object, group.by = "manual_annotation", label = FALSE, pt.size = 0.5)
# Visualizar anotacao
DimPlot(seurat_object, group.by = "manual_annotation", label = FALSE, pt.size = 0.5) +
ggplot2::theme(
legend.position = "bottom"
)
DimPlot(seurat_object, group.by = "manual_annotation", label = FALSE, pt.size = 0.5) +
ggplot2::theme(
legend.position = "bottom"
)
#| label: fig-umap
#| column: screen-inset-shaded
#| fig-align: center
#| layout-nrow: 1
#| warning: false
# Carregando um objeto Seurat já processado (pré-clusterizado)
seurat_object <- readRDS(file = here::here("data/seurat_clustered.RDS"))
# Verificar os clusters
DimPlot(seurat_object, group.by = "seurat_clusters")
# Vamos fazer uma anotacao mais generica usando a resolucao de 0.25
Idents(seurat_object) <- "RNA_snn_res.0.25"
# Definir a lista de renomeação
cluster_annotations <- list(
"1" = "CD8+ Cytotoxic T cells",
"2" = "CD4+ T cells / TCM-like",
"3" = "Tregs",
"4" = "B cells",
"5" = "Monocytes",
"6" = "PRAME+ Tumor",
"7" = "Plasma Cells",
"8" = "Keratinocytes / Tumor-associated Epithelium",
"9" = "Fibroblasts",
"10" = "Proliferating Tumor Cells",
"11" = "Plasmacytoid Dendritic Cells",
"12" = "Endothelial Cells",
"13" = "Mast Cells",
"14" = "Melanoma Cells"
)
# Renomear os clusters
cluster_ids <- as.character(Idents(seurat_object))
# Criando coluna com anotacao manual
seurat_object$manual_annotation <- as.vector(
unlist(cluster_annotations[cluster_ids]))
# Visualizar para conferir
table(seurat_object$manual_annotation)
# Visualizar anotacao
DimPlot(seurat_object, group.by = "manual_annotation", label = FALSE, pt.size = 0.5) +
ggplot2::theme(
legend.position = "bottom"
)
# Definir a lista de renomeação
cluster_annotations <- list(
"1" = "CD8+ Cytotoxic T cells",
"2" = "CD4+ T cells / TCM-like",
"3" = "Tregs",
"4" = "B cells",
"5" = "Monocytes",
"6" = "PRAME+ Tumor",
"7" = "Plasma Cells",
"8" = "Keratinocytes/Epithelial", # Maybe tumor
"9" = "Fibroblasts",
"10" = "Proliferating Tumor Cells",
"11" = "Plasmacytoid Dendritic Cells",
"12" = "Endothelial Cells",
"13" = "Mast Cells",
"14" = "Melanoma Cells"
)
# Renomear os clusters
cluster_ids <- as.character(Idents(seurat_object))
# Criando coluna com anotacao manual
seurat_object$manual_annotation <- as.vector(
unlist(cluster_annotations[cluster_ids]))
# Visualizar anotacao
DimPlot(seurat_object, group.by = "manual_annotation", label = FALSE, pt.size = 0.5) +
ggplot2::theme(
legend.position = "bottom"
)
DimPlot(seurat_object, group.by = "manual_annotation", label = FALSE, pt.size = 0.5)
gc()
reticulate::repl_python()
adata <- anndata::read_h5ad('data/COVID19.h5ad')
# Converta o arquivo .h5ad para um objeto SingleCellExperiment (.rds)
sceasy::convertFormat(
adata,
from = "anndata",
to = "seurat",
outFile = "dataset.rds"
)
library(zellkonverter)
zellkonverter
library(zellkonverter)
sce <- readH5AD(file = "data/COVID19.h5ad")
counts <- Read10X(data.dir = "exported_counts")
counts <- Seurat::Read10X(data.dir = "exported_counts")
counts <- Seurat::Read10X(data.dir = "data/exported_counts")
counts <- Seurat::Read10X(data.dir = "data/exported_counts")
# Converta para AnnData
sceasy::convertFormat(
seurat_object,
from = "seurat",
to = "anndata",
outFile = "seurat_clustered.h5ad"
)
# Carregue seu objeto Seurat
seurat_object <- readRDS(file = here::here("data/seurat_clustered.RDS"))
seurat_object
seurat_object@meta.data
View(seurat_object@meta.data)
# Converta para AnnData
sceasy::convertFormat(
seurat_object,
from = "seurat",
to = "anndata",
outFile = "seurat_clustered.h5ad"
)
seurat_object
seurat_object[["RNA3"]] <- as(
object = seurat_object[["RNA"]], Class = "Assay")
seurat_object
seurat_object@assays$RNA5 <- seurat_object@assays$RNA
# Carregue seu objeto Seurat
seurat_object <- readRDS(file = here::here("data/seurat_clustered.RDS"))
seurat_object@assays$RNA5 <- seurat_object@assays$RNA
seurat_object[["RNA"]] <- as(
object = seurat_object[["RNA5"]], Class = "Assay")
# Converta para AnnData
sceasy::convertFormat(
seurat_object,
from = "seurat",
to = "anndata",
outFile = "seurat_clustered.h5ad"
)
reticulate::repl_python()
# Para evitar problemas vamos definir o Python que usaremos
reticulate::use_python("/usr/bin/python3", required = TRUE)
reticulate::repl_python()
