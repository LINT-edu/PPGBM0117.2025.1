)
#| label: fig-umap-unintegrated
#| column: screen-inset-shaded
#| fig-align: center
#| layout-nrow: 1
#| warning: false
# Verificar os clusters
DimPlot(seurat_object, group.by = "kit")
#| label: fig-umap-unintegrated
#| column: screen-inset-shaded
#| fig-align: center
#| fig-align: 8
#| fig-width: 6
#| layout-nrow: 1
#| warning: false
# Verificar os clusters
DimPlot(seurat_object, group.by = "kit")
#| label: fig-umap-unintegrated
#| column: screen-inset-shaded
#| fig-align: center
#| fig-align: 8
#| fig-width: 8
#| layout-nrow: 1
#| warning: false
# Verificar os clusters
DimPlot(seurat_object, group.by = "kit")
#| label: fig-umap-unintegrated
#| column: screen-inset-shaded
#| fig-align: center
#| fig-align: 10
#| fig-width: 8
#| layout-nrow: 1
#| warning: false
# Verificar os clusters
DimPlot(seurat_object, group.by = "kit")
#| label: fig-umap-unintegrated
#| column: screen-inset-shaded
#| fig-align: center
#| fig-align: 12
#| fig-width: 8
#| layout-nrow: 1
#| warning: false
# Verificar os clusters
DimPlot(seurat_object, group.by = "kit")
#| label: fig-umap-unintegrated
#| column: screen-inset-shaded
#| fig-align: center
#| fig-align: 6
#| fig-width: 6
#| layout-nrow: 1
#| warning: false
# Verificar os clusters
DimPlot(seurat_object, group.by = "kit")
#| label: fig-umap-unintegrated
#| column: screen-inset-shaded
#| fig-align: center
#| fig-height: 6
#| fig-width: 6
#| layout-nrow: 1
#| warning: false
# Verificar os clusters
DimPlot(seurat_object, group.by = "kit")
#| label: fig-umap-unintegrated
#| column: screen-inset-shaded
#| fig-align: center
#| fig-height: 6
#| fig-width: 8
#| layout-nrow: 1
#| warning: false
# Verificar os clusters
DimPlot(seurat_object, group.by = "kit")
#| warning: false
seurat_object <- IntegrateLayers(
object = seurat_object,
method = CCAIntegration,
orig.reduction = "pca",
new.reduction = "integrated.cca",
verbose = FALSE
)
#| warning: false
seurat_object <- IntegrateLayers(
object = seurat_object,
method = RPCAIntegration,
orig.reduction = "pca",
new.reduction = "integrated.rpca",
verbose = FALSE
)
#| warning: false
seurat_object <- IntegrateLayers(
object = seurat_object,
method = HarmonyIntegration,
orig.reduction = "pca",
new.reduction = "harmony",
verbose = FALSE
)
#| warning: false
seurat_object <- IntegrateLayers(
object = seurat_object,
method = FastMNNIntegration,
orig.reduction = "pca",
new.reduction = "integrated.mnn",
verbose = FALSE
)
#| warning: false
# Vetor com os nomes das reduções geradas por cada método de integração
integration_method_vector <- c('integrated.cca', 'integrated.rpca', 'harmony', 'integrated.mnn')
for (batch_method in integration_method_vector) {
# Encontrar vizinhos com base na redução integrada
seurat_object <- FindNeighbors(
object = seurat_object,
reduction = batch_method,
dims = 1:50,
graph.name = 'snn_npc_0.25'
)
# Realizar clusterização com base no grafo construído
seurat_object <- FindClusters(
object = seurat_object,
graph.name = 'snn_npc_0.25',
cluster.name = paste0(batch_method, '_clusters'),
resolution = 0.25
)
# Gerar redução UMAP a partir do embedding integrado
seurat_object <- RunUMAP(
object = seurat_object,
reduction.key = "umap_",
reduction = batch_method,
dims = 1:50,
reduction.name = paste0("umap_", batch_method),
seed.use = 42
)
}
#| label: fig-integrated-umap
#| column: screen-inset-shaded
#| fig-align: center
#| fig-height: 6
#| fig-width: 6
#| layout-nrow: 1
#| warning: false
# Lista para armanezar as imagens geradas para cada integração
integration_umap <- list()
for (batch_method in integration_method_vector) {
# Armazenar o gráfico UMAP correspondente ao método atual
integration_umap[[batch_method]] <- DimPlot(
seurat_object,
reduction = paste0("umap_", batch_method),
group.by = 'kit',
raster = FALSE,
) +
labs(title = batch_method) +
theme(
legend.position = 'top',
legend.justification = 'center'
)
}
# Exibir cada um dos gráficos UMAP integrados individualmente
integration_umap$integrated.cca
integration_umap$integrated.rpca
integration_umap$harmony
integration_umap$integrated.mnn
# Data.frame vazio para armazenas as metricas
metrics_df <- data.frame()
for (batch_method in integration_method_vector) {
# Extrair as coordenadas de embedding do método de integração
batch_method_embeddings <- Embeddings(
object = seurat_object,
reduction = batch_method
)
# Calculando métricas a partir do pacote scPOP
metrics <- run_all_metrics(
reduction = batch_method_embeddings,
metadata = seurat_object@meta.data,
batch_key = 'batch',
label1_key = 'celltype',
label2_key = 'cluster',
run_name = 'example'
)
metrics_df <- rbind(
metrics,
metrics_df
)
}
# Extrair as coordenadas de embedding do método de integração
batch_method_embeddings <- Embeddings(
object = seurat_object,
reduction = batch_method
)
# Calculando métricas a partir do pacote scPOP
metrics <- run_all_metrics(
reduction = batch_method_embeddings,
metadata = seurat_object@meta.data,
batch_key = 'batch',
label1_key = 'celltype',
label2_key = 'cluster',
run_name = 'example'
)
?run_all_metrics
colnames(seurat_object@meta.data)
# Calculando métricas a partir do pacote scPOP
metrics <- run_all_metrics(
reduction = batch_method_embeddings,
metadata = seurat_object@meta.data,
batch_key = 'batch',
label1_key = 'cell_type',
label2_key = paste0(batch_method, '_clusters'),
run_name = batch_method
)
# Calculando métricas a partir do pacote scPOP
metrics <- run_all_metrics(
reduction = batch_method_embeddings,
metadata = seurat_object@meta.data,
batch_key = 'kit',
label1_key = 'cell_type',
label2_key = paste0(batch_method, '_clusters'),
run_name = batch_method
)
metrics_df <- rbind(
metrics,
metrics_df
)
metrics_df
View(metrics_df)
# Data.frame vazio para armazenas as metricas
metrics_df <- data.frame()
for (batch_method in integration_method_vector) {
# Extrair as coordenadas de embedding do método de integração
batch_method_embeddings <- Embeddings(
object = seurat_object,
reduction = batch_method
)
# Calculando métricas a partir do pacote scPOP
metrics <- run_all_metrics(
reduction = batch_method_embeddings,
metadata = seurat_object@meta.data,
batch_key = 'kit',
label1_key = 'cell_type',
label2_key = paste0(batch_method, '_clusters'),
run_name = batch_method
)
metrics_df <- rbind(
metrics,
metrics_df
)
}
metrics
metrics_df
colnames(metrics_df)
cat(colnames(metrics_df))
colnames(metrics_df) <- c("run", "ari_label", "nmi_label", "lisi_kit", "lisi_cell_type", "lisi_clusters" "silWidth_kit", "silWidth_cell_type", "silWidth_clusters")
colnames(metrics_df) <- c("run", "ari_label", "nmi_label", "lisi_kit", "lisi_cell_type", "lisi_clusters", "silWidth_kit", "silWidth_cell_type", "silWidth_clusters")
# Data.frame vazio para armazenas as metricas
metrics_df <- data.frame()
for (batch_method in integration_method_vector) {
# Extrair as coordenadas de embedding do método de integração
batch_method_embeddings <- Embeddings(
object = seurat_object,
reduction = batch_method
)
# Calculando métricas a partir do pacote scPOP
metrics <- run_all_metrics(
reduction = batch_method_embeddings,
metadata = seurat_object@meta.data,
batch_key = 'kit',
label1_key = 'cell_type',
label2_key = paste0(batch_method, '_clusters'),
run_name = batch_method
)
colnames(metrics_df) <- c("run", "ari_label", "nmi_label", "lisi_kit", "lisi_cell_type", "lisi_clusters", "silWidth_kit", "silWidth_cell_type", "silWidth_clusters")
metrics_df <- rbind(
metrics,
metrics_df
)
}
# Data.frame vazio para armazenas as metricas
metrics_df <- data.frame()
for (batch_method in integration_method_vector) {
# Extrair as coordenadas de embedding do método de integração
batch_method_embeddings <- Embeddings(
object = seurat_object,
reduction = batch_method
)
# Calculando métricas a partir do pacote scPOP
metrics <- run_all_metrics(
reduction = batch_method_embeddings,
metadata = seurat_object@meta.data,
batch_key = 'kit',
label1_key = 'cell_type',
label2_key = paste0(batch_method, '_clusters'),
run_name = batch_method
)
colnames(metrics) <- c("run", "ari_label", "nmi_label", "lisi_kit", "lisi_cell_type", "lisi_clusters", "silWidth_kit", "silWidth_cell_type", "silWidth_clusters")
metrics_df <- rbind(
metrics,
metrics_df
)
}
# Explore as metricas
DT::datatable(metrics_df)
names(metrics_df)
calc_sumZscore(
lapply(names(metrics_df), function(id_method) {
quality_metrics_summarise[[id_method]][2:9]
}),
'kit'
)
calc_sumZscore(
lapply(names(metrics_df), function(id_method) {
metrics_df[[id_method]][2:9]
}),
'kit'
)
metrics_df
calc_sumZscore(
lapply(integration_method_vector, function(batch_method) {
metrics_df[metrics_df$run == batch_method][2:9]
}),
'kit'
)
batch_method
metrics_df[metrics_df$run == batch_method]
metrics_df[metrics_df$run == batch_method,]
metrics_df[metrics_df$run == batch_method, 2:9]
scpop_zscore <- calc_sumZscore(
lapply(integration_method_vector, function(batch_method) {
metrics_df[metrics_df$run == batch_method, 2:9]
}),
'kit'
)
scpop_zscore
metrics_df$zscore <- scpop_zscore
metrics_df
metrics_df
View(metrics_df)
gc()
?RunUMAP
devtools::install_github("antuneslab/crossdome", build_vignettes = TRUE)
crossdome::cross_browser()
#| warning: false
# Carregar pacotes
library(readr)
library(dplyr)
library(ggplot2)
library(Seurat)
library(SeuratWrappers)
library(harmony)
library(batchelor)
library(scPOP)
library(kBET)
# Definindo diretorio padrao
knitr::opts_knit$set(
root.dir = "/home/oandrefonseca/Disciplinas/PPGBM0117.2025.1",
verbose = FALSE
)
# Aumentar o limite de uso de memoria
options(future.globals.maxSize = 10 * 1024^3) # 10 GB, por exemplo
# Carregue seu objeto Seurat
seurat_object <- readRDS(file = here::here("data/seurat_multi_technology.RDS"))
View(seurat_object@meta.data)
table(seurat_object$kit)
#| warning: false
seurat_object[["RNA"]] <- split(seurat_object[["RNA"]], f = seurat_object$kit)
# Carregar pacotes
library(readr)
library(dplyr)
library(ggplot2)
library(Seurat)
library(SeuratWrappers)
library(harmony)
library(batchelor)
library(scPOP)
#| warning: false
seurat_object <- NormalizeData(
seurat_object, normalization.method = "LogNormalize", scale.factor = 10000)
seurat_object <- FindVariableFeatures(
seurat_object, selection.method = "vst", nfeatures = 2000)
seurat_object <- ScaleData(
seurat_object, features = VariableFeatures(seurat_object))
seurat_object <- RunPCA(seurat_object, npcs = 50, verbose = FALSE)
#| warning: false
seurat_object <- FindNeighbors(seurat_object, dims = 1:20)
seurat_object <- FindClusters(
seurat_object,
cluster.name = "unintegrated_clusters",
resolution = 0.25
)
#| warning: false
seurat_object <- RunUMAP(
seurat_object,
dims = 1:20,
reduction = "pca",
reduction.name = "umap.unintegrated"
)
#| label: fig-umap-unintegrated
#| column: screen-inset-shaded
#| fig-align: center
#| fig-height: 6
#| fig-width: 8
#| layout-nrow: 1
#| warning: false
# Verificar os clusters
DimPlot(seurat_object, group.by = "kit")
#| warning: false
seurat_object <- IntegrateLayers(
object = seurat_object,
method = CCAIntegration,
orig.reduction = "pca",
new.reduction = "integrated.cca",
verbose = FALSE
)
#| warning: false
seurat_object <- IntegrateLayers(
object = seurat_object,
method = RPCAIntegration,
orig.reduction = "pca",
new.reduction = "integrated.rpca",
verbose = FALSE
)
#| warning: false
seurat_object <- IntegrateLayers(
object = seurat_object,
method = HarmonyIntegration,
orig.reduction = "pca",
new.reduction = "harmony",
verbose = FALSE
)
#| warning: false
seurat_object <- IntegrateLayers(
object = seurat_object,
method = FastMNNIntegration,
orig.reduction = "pca",
new.reduction = "integrated.mnn",
verbose = FALSE
)
#| warning: false
# Vetor com os nomes das reduções geradas por cada método de integração
integration_method_vector <- c('integrated.cca', 'integrated.rpca', 'harmony', 'integrated.mnn')
for (batch_method in integration_method_vector) {
# Encontrar vizinhos com base na redução integrada
seurat_object <- FindNeighbors(
object = seurat_object,
reduction = batch_method,
dims = 1:50,
graph.name = 'snn_npc_0.25'
)
# Realizar clusterização com base no grafo construído
seurat_object <- FindClusters(
object = seurat_object,
graph.name = 'snn_npc_0.25',
cluster.name = paste0(batch_method, '_clusters'),
resolution = 0.25
)
# Gerar redução UMAP a partir do embedding integrado
seurat_object <- RunUMAP(
object = seurat_object,
reduction.key = "umap_",
reduction = batch_method,
dims = 1:50,
reduction.name = paste0("umap_", batch_method),
seed.use = 42
)
}
#| label: fig-integrated-umap
#| column: screen-inset-shaded
#| fig-align: center
#| fig-height: 6
#| fig-width: 6
#| layout-nrow: 1
#| warning: false
# Lista para armanezar as imagens geradas para cada integração
integration_umap <- list()
for (batch_method in integration_method_vector) {
# Armazenar o gráfico UMAP correspondente ao método atual
integration_umap[[batch_method]] <- DimPlot(
seurat_object,
reduction = paste0("umap_", batch_method),
group.by = 'kit',
raster = FALSE,
) +
labs(title = batch_method) +
theme(
legend.position = 'top',
legend.justification = 'center'
)
}
# Exibir cada um dos gráficos UMAP integrados individualmente
integration_umap$integrated.cca
integration_umap$integrated.rpca
integration_umap$harmony
integration_umap$integrated.mnn
#| warning: false
# Data.frame vazio para armazenas as metricas
metrics_df <- data.frame()
for (batch_method in integration_method_vector) {
# Extrair as coordenadas de embedding do método de integração
batch_method_embeddings <- Embeddings(
object = seurat_object,
reduction = batch_method
)
# Calculando métricas a partir do pacote scPOP
metrics <- run_all_metrics(
reduction = batch_method_embeddings,
metadata = seurat_object@meta.data,
batch_key = 'kit',
label1_key = 'cell_type',
label2_key = paste0(batch_method, '_clusters'),
run_name = batch_method
)
colnames(metrics) <- c("run", "ari_label", "nmi_label", "lisi_batch", "lisi_cell_type", "lisi_clusters", "silWidth_batch", "silWidth_cell_type", "silWidth_clusters")
metrics_df <- rbind(
metrics,
metrics_df
)
}
