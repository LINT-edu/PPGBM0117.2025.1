#| warning: false
seurat_object <- NormalizeData(
seurat_object, normalization.method = "LogNormalize", scale.factor = 10000)
#| label: fig-highly-variable-genes
#| column: screen-inset-shaded
#| fig-align: center
#| layout-nrow: 1
seurat_object <- FindVariableFeatures(
seurat_object, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seurat_object), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seurat_object)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
#| warning: false
seurat_object <- ScaleData(seurat_object)
seurat_object <- SCTransform(
seurat_object, vars.to.regress = "percent.mt", verbose = FALSE)
install.packages('BiocManager')
BiocManager::install('glmGamPoi')
BiocManager::install('glmGamPoi')
#| warning: false
seurat_object <- RunPCA(
seurat_object, assay = "", features = VariableFeatures(object = seurat_object))
#| warning: false
library(Seurat)
library(SoupX)
library(scDblFinder)
library(dplyr)
library(here)
library(patchwork)
knitr::opts_knit$set(
root.dir = "/home/oandrefonseca/Disciplinas/PPGBM0117.2025.1",
verbose = FALSE
)
#| warning: false
seurat_object <- RunPCA(
seurat_object, assay = "", features = VariableFeatures(object = seurat_object))
seurat_object
seurat_object@assays
seurat_object <- RunPCA(
seurat_object, assay = "RNA", features = VariableFeatures(object = seurat_object))
seurat_object@reductions
seurat_object <- RunPCA(
seurat_object, assay = "RNA", reduction.name = "PC_RNA", features = VariableFeatures(object = seurat_object))
seurat_object <- RunPCA(
seurat_object, assay = "RNA", reduction.name = "STD_RNA", features = VariableFeatures(object = seurat_object))
# Examine and visualize PCA results a few different ways
VizDimLoadings(seurat_object, dims = 1:2, reduction = "pca")
?VizDimLoadings
#| label: fig-pc-loadings
#| column: screen-inset-shaded
#| fig-align: center
# Examine and visualize PCA results a few different ways
VizDimLoadings(seurat_object, dims = 1:2, reduction = "pca")
?VizDimLoadings
#| label: fig-pc-loadings
#| column: screen-inset-shaded
#| fig-align: center
# Examine and visualize PCA results a few different ways
VizDimLoadings(seurat_object, dims = 1:2, reduction = "STD_RNA")
#| warning: false
seurat_object <- RunUMAP(seurat_object, reduction = "STD_RNA", dims = 1:20)
seurat_object <- RunUMAP(seurat_object, reduction = "STD_RNA", reduction.name = "UMAP_STD", dims = 1:20)
seurat_object <- RunUMAP(seurat_object, reduction = "STD_RNA", reduction.name = "STD_UMAP", dims = 1:20)
DimPlot(pbmc, reduction = "STD_UMAP")
DimPlot(seurat_object, reduction = "STD_UMAP")
# Converta o objeto Seurat para SingleCellExperiment
sce <- as.SingleCellExperiment(seurat_object)
#| warning: false
library(Seurat)
library(scDblFinder)
library(dplyr)
library(here)
library(patchwork)
knitr::opts_knit$set(
root.dir = "/home/oandrefonseca/Disciplinas/PPGBM0117.2025.1",
verbose = FALSE
)
breast_data <- Read10X(
data.dir = here::here("data/filtered_feature_bc_matrix/"))
seurat_object <- CreateSeuratObject(
counts = breast_data, project = "Breast_7k")
#| eval: false
# Exibe de forma compacta a estrutura interna de um objeto R
str(seurat_object)
View(seurat_object@meta.data)
# Genes mitocondriais (nomes iniciam com "MT-")
seurat_object[["percent.mt"]] <- PercentageFeatureSet(
seurat_object, pattern = "^MT-")
# Genes ribossômicos (nomes iniciam com "RPS" ou "RPL")
seurat_object[["percent.ribo"]] <- PercentageFeatureSet(
seurat_object, pattern = "^RP[SL]")
# Genes de hemoglobina - remover HBP explicitamente
hb_genes <- grep("^HB", rownames(seurat_object), value = TRUE)
hb_genes <- hb_genes[!grepl("^HBP", hb_genes)]
seurat_object[["percent.hb"]] <- PercentageFeatureSet(
seurat_object, features = hb_genes)
pre_qc_stats <- data.frame(
number_of_cells = ncol(seurat_object),
mean_counts_per_cell = mean(seurat_object$nCount_RNA),
median_counts_per_cell = median(seurat_object$nCount_RNA),
mean_features_per_cell = mean(seurat_object$nFeature_RNA),
median_features_per_cell = median(seurat_object$nFeature_RNA)
)
#| label: fig-quality-metrics
#| column: screen-inset-shaded
#| fig-align: center
#| warning: false
p1 <- VlnPlot(seurat_object,
features = c("nCount_RNA", "nFeature_RNA"), ncol = 3)
p2 <- VlnPlot(seurat_object,
features = c("percent.mt", "percent.ribo", "percent.hb"), ncol = 3)
p1
p2
#| label: fig-quality-correlation
#| column: screen-inset-shaded
#| layout-nrow: 1
plot1 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1
plot2
is_outlier <- function(seurat_object, metric, nmads = 3) {
library(matrixStats)
values <- seurat_object@meta.data[[metric]]
med <- median(values, na.rm = TRUE)
mad_val <- mad(values, center = med, constant = 1, na.rm = TRUE)
outlier <- (values < (med - nmads * mad_val)) | (values > (med + nmads * mad_val))
return(outlier)
}
seurat_object$mt_outlier <- is_outlier(
seurat_object, metric = "percent.mt", nmads = 3)
# Converta o objeto Seurat para SingleCellExperiment
sce <- as.SingleCellExperiment(seurat_object)
# Executa a identificação de dupletos
sce <- scDblFinder(sce)
# Adiciona o resultado de volta ao objeto Seurat
seurat_object$scDblFinder.class <- sce$scDblFinder.class
seurat_object$doublet_score <- sce$scDblFinder.score
# Visualiza a proporção de dupletos identificados
table(seurat_object$scDblFinder.class)
# Filtro com thresholds definidos manualmente
seurat_object <- subset(
seurat_object,
subset = nFeature_RNA > 200 &
nFeature_RNA < 6000 &
percent.mt < 10 &
scDblFinder.class = "singlet"
# Filtro com thresholds definidos manualmente
seurat_object <- subset(
seurat_object,
subset = nFeature_RNA > 200 &
nFeature_RNA < 6000 &
percent.mt < 10 &
scDblFinder.class == "singlet"
)
# Estatísticas após o QC
post_qc_stats <- data.frame(
number_of_cells = ncol(seurat_object),
mean_counts_per_cell = mean(seurat_object$nCount_RNA),
median_counts_per_cell = median(seurat_object$nCount_RNA),
mean_features_per_cell = mean(seurat_object$nFeature_RNA),
median_features_per_cell = median(seurat_object$nFeature_RNA)
)
# Unindo as tabelas
qc_summary <- rbind(
cbind(Etapa = "Antes do QC", pre_qc_stats),
cbind(Etapa = "Depois do QC", post_qc_stats)
)
#| column: screen-inset-shaded
#| layout-nrow: 1
DT::datatable(qc_summary)
#| warning: false
seurat_object <- NormalizeData(
seurat_object, normalization.method = "LogNormalize", scale.factor = 10000)
#| label: fig-highly-variable-genes
#| column: screen-inset-shaded
#| fig-align: center
#| layout-nrow: 1
#| warning: false
seurat_object <- FindVariableFeatures(
seurat_object, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seurat_object), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seurat_object)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
#| warning: false
seurat_object <- ScaleData(seurat_object)
#| warning: false
seurat_object <- SCTransform(
seurat_object, vars.to.regress = "percent.mt", verbose = FALSE)
#| warning: false
seurat_object <- RunPCA(
seurat_object, assay = "RNA", reduction.name = "STD_PCA", features = VariableFeatures(object = seurat_object))
#| label: fig-pc-loadings
#| column: screen-inset-shaded
#| fig-align: center
# Examine and visualize PCA results a few different ways
VizDimLoadings(seurat_object, dims = 1:2, reduction = "STD_PCA")
#| warning: false
seurat_object <- RunUMAP(seurat_object, reduction = "STD_PCA", reduction.name = "STD_UMAP", dims = 1:20)
#| label: fig-umap-plot
#| column: screen-inset-shaded
#| fig-align: center
DimPlot(seurat_object, reduction = "STD_UMAP")
?RunUMAP
#| warning: false
seurat_object <- RunUMAP(
seurat_object, reduction = "STD_PCA", umap.method = "umap-learn", reduction.name = "STD_UMAP", dims = 1:20)
#| warning: false
seurat_object <- RunUMAP(
seurat_object, reduction = "STD_PCA", umap.method = "umap-learn", reduction.name = "STD_UMAP", dims = 1:20)
#| warning: false
seurat_object <- RunUMAP(
seurat_object, reduction = "STD_PCA", umap.method = "umap-learn", reduction.name = "STD_UMAP", dims = 1:20)
#| warning: false
library(Seurat)
library(scDblFinder)
library(dplyr)
library(here)
library(patchwork)
knitr::opts_knit$set(
root.dir = "/home/oandrefonseca/Disciplinas/PPGBM0117.2025.1",
verbose = FALSE
)
breast_data <- Read10X(
data.dir = here::here("data/filtered_feature_bc_matrix/"))
seurat_object <- CreateSeuratObject(
counts = breast_data, project = "Breast_7k")
View(seurat_object@meta.data)
# Genes mitocondriais (nomes iniciam com "MT-")
seurat_object[["percent.mt"]] <- PercentageFeatureSet(
seurat_object, pattern = "^MT-")
# Genes ribossômicos (nomes iniciam com "RPS" ou "RPL")
seurat_object[["percent.ribo"]] <- PercentageFeatureSet(
seurat_object, pattern = "^RP[SL]")
# Genes de hemoglobina - remover HBP explicitamente
hb_genes <- grep("^HB", rownames(seurat_object), value = TRUE)
hb_genes <- hb_genes[!grepl("^HBP", hb_genes)]
seurat_object[["percent.hb"]] <- PercentageFeatureSet(
seurat_object, features = hb_genes)
pre_qc_stats <- data.frame(
number_of_cells = ncol(seurat_object),
mean_counts_per_cell = mean(seurat_object$nCount_RNA),
median_counts_per_cell = median(seurat_object$nCount_RNA),
mean_features_per_cell = mean(seurat_object$nFeature_RNA),
median_features_per_cell = median(seurat_object$nFeature_RNA)
)
#| label: fig-quality-metrics
#| column: screen-inset-shaded
#| fig-align: center
#| warning: false
p1 <- VlnPlot(seurat_object,
features = c("nCount_RNA", "nFeature_RNA"), ncol = 3)
p2 <- VlnPlot(seurat_object,
features = c("percent.mt", "percent.ribo", "percent.hb"), ncol = 3)
p1
p2
#| label: fig-quality-correlation
#| column: screen-inset-shaded
#| layout-nrow: 1
plot1 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1
plot2
is_outlier <- function(seurat_object, metric, nmads = 3) {
library(matrixStats)
values <- seurat_object@meta.data[[metric]]
med <- median(values, na.rm = TRUE)
mad_val <- mad(values, center = med, constant = 1, na.rm = TRUE)
outlier <- (values < (med - nmads * mad_val)) | (values > (med + nmads * mad_val))
return(outlier)
}
seurat_object$mt_outlier <- is_outlier(
seurat_object, metric = "percent.mt", nmads = 3)
# Converta o objeto Seurat para SingleCellExperiment
sce <- as.SingleCellExperiment(seurat_object)
# Executa a identificação de dupletos
sce <- scDblFinder(sce)
# Adiciona o resultado de volta ao objeto Seurat
seurat_object$scDblFinder.class <- sce$scDblFinder.class
seurat_object$doublet_score <- sce$scDblFinder.score
# Visualiza a proporção de dupletos identificados
table(seurat_object$scDblFinder.class)
# Criando copia do objeto pre-filtragem
pre_seurat_object <- seurat_object
# Filtro com thresholds definidos manualmente
seurat_object <- subset(
seurat_object,
subset = nFeature_RNA > 200 &
nFeature_RNA < 6000 &
percent.mt < 10 &
scDblFinder.class == "singlet"
)
# Estatísticas após o QC
post_qc_stats <- data.frame(
number_of_cells = ncol(seurat_object),
mean_counts_per_cell = mean(seurat_object$nCount_RNA),
median_counts_per_cell = median(seurat_object$nCount_RNA),
mean_features_per_cell = mean(seurat_object$nFeature_RNA),
median_features_per_cell = median(seurat_object$nFeature_RNA)
)
# Unindo as tabelas
qc_summary <- rbind(
cbind(Etapa = "Antes do QC", pre_qc_stats),
cbind(Etapa = "Depois do QC", post_qc_stats)
)
#| column: screen-inset-shaded
#| layout-nrow: 1
DT::datatable(qc_summary)
#| warning: false
seurat_object <- NormalizeData(
seurat_object, normalization.method = "LogNormalize", scale.factor = 10000)
#| label: fig-highly-variable-genes
#| column: screen-inset-shaded
#| fig-align: center
#| layout-nrow: 1
#| warning: false
seurat_object <- FindVariableFeatures(
seurat_object, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seurat_object), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seurat_object)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
#| warning: false
seurat_object <- ScaleData(seurat_object)
#| warning: false
seurat_object <- SCTransform(
seurat_object, vars.to.regress = "percent.mt", verbose = FALSE)
#| warning: false
seurat_object <- RunPCA(
seurat_object, assay = "RNA", reduction.name = "STD_PCA", features = VariableFeatures(object = seurat_object))
#| label: fig-pc-loadings
#| column: screen-inset-shaded
#| fig-align: center
# Examine and visualize PCA results a few different ways
VizDimLoadings(seurat_object, dims = 1:2, reduction = "STD_PCA")
#| warning: false
seurat_object <- RunUMAP(
seurat_object, reduction = "STD_PCA", umap.method = "umap-learn", reduction.name = "STD_UMAP", dims = 1:20)
#| label: fig-umap-plot
#| column: screen-inset-shaded
#| fig-align: center
DimPlot(seurat_object, reduction = "STD_UMAP")
View(seurat_object@meta.data)
?mad
is_outlier <- function(seurat_object, metric, nmads = 3, verbose = TRUE) {
# Extrai os valores da métrica desejada
values <- seurat_object@meta.data[[metric]]
# Calcula mediana e desvio absoluto da mediana (MAD)
med <- median(values, na.rm = TRUE)
mad_val <- mad(values, center = med, constant = 1, na.rm = TRUE)
# Define os thresholds inferior e superior
lower <- med - nmads * mad_val
upper <- med + nmads * mad_val
# Imprime os limites, se verbose = TRUE
if (verbose) {
message(glue::glue("Outliers para '{metric}' definidos como valores fora do intervalo:"))
message(glue::glue("  Inferior: {round(lower, 2)}"))
message(glue::glue("  Superior: {round(upper, 2)}"))
}
# Identifica outliers
outlier <- (values < lower) | (values > upper)
return(outlier)
}
is_outlier(
seurat_object, metric = "percent.mt", nmads = 3)
library(Seurat)
library(scDblFinder)
library(dplyr)
library(here)
library(patchwork)
knitr::opts_knit$set(
root.dir = "/home/oandrefonseca/Disciplinas/PPGBM0117.2025.1",
verbose = FALSE
)
library(Seurat)
# library(scDblFinder)
library(dplyr)
library(here)
library(patchwork)
knitr::opts_knit$set(
root.dir = "/home/oandrefonseca/Disciplinas/PPGBM0117.2025.1",
verbose = FALSE
)
breast_data <- Read10X(
data.dir = here::here("data/filtered_feature_bc_matrix/"))
?CreateSeuratObject
seurat_object <- CreateSeuratObject(
counts = breast_data, project = "Breast_7k")
rm(breast_data)
# Exibe de forma compacta a estrutura interna de um objeto R
str(seurat_object)
View(seurat_object@meta.data)
View(seurat_object@assays$RNA$counts)
seurat_object@assays$RNA$counts[1:10, 1:10]
names(seurat_object@assays$RNA$counts[1:10, ])
row.names(seurat_object@assays$RNA$counts[1:10, ])
# Genes mitocondriais (nomes iniciam com "MT-")
seurat_object[["percent.mt"]] <- PercentageFeatureSet(
seurat_object, pattern = "^MT-")
# Genes ribossômicos (nomes iniciam com "RPS" ou "RPL")
seurat_object[["percent.ribo"]] <- PercentageFeatureSet(
seurat_object, pattern = "^RP[SL]")
# Genes de hemoglobina - remover HBP explicitamente
hb_genes <- grep("^HB", rownames(seurat_object), value = TRUE)
hb_genes <- hb_genes[!grepl("^HBP", hb_genes)]
seurat_object[["percent.hb"]] <- PercentageFeatureSet(
seurat_object, features = hb_genes)
View(seurat_object@meta.data)
hist(seurat_object[["percent.mt"]])
hist(as.numeric(seurat_object[["percent.mt"]]))
seurat_object[["percent.mt"]][1]
mt <- as.vector(seurat_object[["percent.mt"]])
str(mt)
mt <- unlist(mt)
hist(mt)
pre_qc_stats <- data.frame(
number_of_cells = ncol(seurat_object),
mean_counts_per_cell = mean(seurat_object$nCount_RNA),
median_counts_per_cell = median(seurat_object$nCount_RNA),
mean_features_per_cell = mean(seurat_object$nFeature_RNA),
median_features_per_cell = median(seurat_object$nFeature_RNA)
)
View(pre_qc_stats)
p1 <- VlnPlot(seurat_object,
features = c("nCount_RNA", "nFeature_RNA"), ncol = 3)
p2 <- VlnPlot(seurat_object,
features = c("percent.mt", "percent.ribo", "percent.hb"), ncol = 3)
p1
p2
plot1 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1
plot2
is_outlier <- function(seurat_object, metric, nmads = 3, verbose = TRUE) {
# Extrai os valores da métrica desejada
values <- seurat_object@meta.data[[metric]]
# Calcula mediana e desvio absoluto da mediana (MAD)
med <- median(values, na.rm = TRUE)
mad_val <- mad(values, center = med, constant = 1, na.rm = TRUE)
# Define os thresholds inferior e superior
lower <- med - nmads * mad_val
upper <- med + nmads * mad_val
# Imprime os limites, se verbose = TRUE
if (verbose) {
message(glue::glue("Outliers para '{metric}' definidos como valores fora do intervalo:"))
message(glue::glue("  Inferior: {round(lower, 2)}"))
message(glue::glue("  Superior: {round(upper, 2)}"))
}
# Identifica outliers
outlier <- (values < lower) | (values > upper)
return(outlier)
}
seurat_object$mt_outlier <- is_outlier(
seurat_object, metric = "percent.mt", nmads = 3)
table(seurat_object$mt_outlier)
# Converta o objeto Seurat para SingleCellExperiment
sce <- as.SingleCellExperiment(seurat_object)
?as.SingleCellExperiment
str(sce)
(sce)
sce <- scDblFinder(sce)
sce$scDblFinder.class
# Adiciona o resultado de volta ao objeto Seurat
seurat_object$scDblFinder.class <- sce$scDblFinder.class
seurat_object$doublet_score <- sce$scDblFinder.score
sce$scDblFinder.score
# Visualiza a proporção de dupletos identificados
table(seurat_object$scDblFinder.class)
# Criando copia do objeto pre-filtragem
pre_seurat_object <- seurat_object
# Filtro com thresholds definidos manualmente
seurat_object <- subset(
seurat_object,
subset = nFeature_RNA > 200 &
nFeature_RNA < 6000 &
percent.mt < 10 &
scDblFinder.class == "singlet"
)
View(seurat_object@meta.data)
# Estatísticas após o QC
post_qc_stats <- data.frame(
number_of_cells = ncol(seurat_object),
mean_counts_per_cell = mean(seurat_object$nCount_RNA),
median_counts_per_cell = median(seurat_object$nCount_RNA),
mean_features_per_cell = mean(seurat_object$nFeature_RNA),
median_features_per_cell = median(seurat_object$nFeature_RNA)
)
# Unindo as tabelas
qc_summary <- rbind(
cbind(Etapa = "Antes do QC", pre_qc_stats),
cbind(Etapa = "Depois do QC", post_qc_stats)
)
View(qc_summary)
seurat_object <- NormalizeData(
seurat_object, normalization.method = "LogNormalize", scale.factor = 10000)
seurat_object <- FindVariableFeatures(
seurat_object, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seurat_object), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seurat_object)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
plot2
seurat_object <- ScaleData(seurat_object)
